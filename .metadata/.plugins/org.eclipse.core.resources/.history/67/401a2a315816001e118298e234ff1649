import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

public class MultiServer06_29
{
	static ServerSocket serverSocket = null;
	static Socket socket = null;
	Map<String, PrintWriter> clientMap;
	ArrayList <ChatThread> chatlist = 
			new ArrayList <ChatThread>(); //스레드 리스트
	HashMap<String, ChatThread> hash= new HashMap<String, ChatThread>(); 
	
	//ID를 KEY로 해서 스레드를 VALUE로 갖고 있는 HASHMAP
	
	Date now = new Date(System.currentTimeMillis());
	SimpleDateFormat simple= new SimpleDateFormat("(a hh:mm)");
	
	//채팅내용 옆에 시간을 같이 출력하기 위해서 현재시간에 포맷을 지정

	public MultiServer06_29(Socket socket)
	{
		clientMap = new HashMap<String, PrintWriter>();
		Collections.synchronizedMap(clientMap);
	}

	public void init()
	{
		try
		{
			serverSocket = new ServerSocket(9999);
			System.out.println("서버가 시작되었습니다.");

			while (true)
			{
				socket = serverSocket.accept();
				System.out.println(socket.getInetAddress() + ":" + socket.getPort());

				Thread msr = new MultiServerT(socket);
				msr.start();
			}
		} catch (Exception e)
		{
			e.printStackTrace();
		} finally
		{
			try
			{
				serverSocket.close();
			} catch (Exception e)
			{
				e.printStackTrace();
			}
		}
	}

	public void list(PrintWriter out)
	{
		Iterator<String> it = clientMap.keySet().iterator();
		String msg = "사용자리스트 [";
		while (it.hasNext())
		{
			msg += (String) it.next() + ",";
		}
		msg = msg.substring(0, msg.length() - 1) + "]";
		try
		{
			out.println(msg);
		} catch (Exception e)
		{
		}
	}

	public static void main(String[] args)
	{
		Connection conn = null;
		Statement stmt = null;

		try
		{
			Class.forName("oracle.jdbc.driver.OracleDriver");
//			System.out.println("오라클 드라이버됨"); //확인용
			String url = ("jdbc:oracle:thin:@localhost:1521:xe");
			String user = ("MChat");
			String password = ("123");

			conn = DriverManager.getConnection(url, user, password);
//			System.out.println("conn ="+conn); // 확인용
			stmt=conn.createStatement();
			StringBuffer sql = new StringBuffer();
			sql.append("create table test1;"); 	// test
			sql.append("drop table test1;");	// test
		} catch (ClassNotFoundException e)
		{
			System.out.println("오라클 드라이버 클래스를 못찾음");
		} catch (SQLException e)
		{
			System.out.println("sql오류" + e.getMessage());
		} finally
		{
			try
			{
				if (stmt != null)
					stmt.close();
				if (conn != null)
					conn.close();
			} catch (Exception e)
			{
			}
		}

		MultiServer06_29 ms = new MultiServer06_29();
		ms.init();
	}

	class MultiServerT extends Thread
	{
		Socket socket;
		PrintWriter out = null;
		BufferedReader in = null;
		String name = "";

		public MultiServerT(Socket socket)
		{
			this.socket = socket;
			try
			{
				out = new PrintWriter(this.socket.getOutputStream(), true);
				in = new BufferedReader(new InputStreamReader(this.socket.getInputStream()));
			} catch (Exception e)
			{
				System.out.println("예외:" + e);
			}
		}

		public void run()
		{
			String s = "";
			try
			{
				name = in.readLine();
				System.out.println("[" + name + "]님이 대화방에 입장하셨습니다.");
				sendAllMsg(name + "님이 입장하셨습니다.", "");
				clientMap.put(name, out);
				System.out.println("현재 접속자 수는 " + clientMap.size() + "명 입니다.");
				while (in != null)
				{
					s = in.readLine();
					if (s.equals("q") || s.equals("Q"))
						break;

					System.out.println(name + " > " + s);
					if (s.equals("/list"))
						list(out);
					else
						sendAllMsg(s, name);
				}
				System.out.println("쓰레드 종료.");
			} catch (Exception e)
			{
				System.out.println("예외:" + e);
			} finally
			{
				clientMap.remove(name);
				sendAllMsg(name + "님이 퇴장하셨습니다.", "");
				System.out.println("현재 접속자 수는 " + clientMap.size() + "명 입니다.");
				try
				{
					in.close();
					out.close();
					socket.close();
				} catch (Exception e)
				{
					e.printStackTrace();
				}
			}
		}
		public void stopServer() {
			try {
				Iterator<ChatThread> iterator = chatlist.iterator(); 
				//chatlist에 있는 스레드 전체를 가져오기 위해 iterator 객체 생성
				while (iterator.hasNext()) { //다음 객체가 있는 동안
					ChatThread chat = iterator.next(); // 다음 객체를 스레드에 대입
					chat.soket.close(); //해당 스레드 통신소켓제거
					iterator.remove(); //스레드 제거
					
				}
				if(serverSocket!=null && !serverSocket.isClosed()) {
					serverSocket.close(); //서버소켓 닫기
				}
				System.out.println("서버종료");
			}catch (Exception e) {}
		}
		
		public void sendAllMsg(String msg, String name)
		{
			Iterator<String> it = clientMap.keySet().iterator();
			while (it.hasNext())
			{
				try
				{
					PrintWriter it_out = (PrintWriter) clientMap.get(it.next());
					if (name.equals(""))
					{
						it_out.println(msg);
					} else
					{
						it_out.println(name + " > " + msg);
					}
				} catch (Exception e)
				{
					System.out.println("예외:" + e);
				}
			}
		}
		

	}
}