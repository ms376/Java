import java.io.IOException;
import java.net.Socket;
import java.net.UnknownHostException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;

public class ChatClient
{

	public static void main(String[] args) throws UnknownHostException, IOException
	{
		HashMap<String, String> map = new HashMap<String, String>();

		try
		{
			String ServerIP = "localhost";
			if (args.length > 0)
				ServerIP = args[0];
			Socket socket = new Socket(ServerIP, 9999); // 소켓 객체 생성
			System.out.println("서버와 연결이 되었습니다....");

			// 서버에서 보내는 메시지를 사용자의 콘솔에 출력하는 쓰레드.
			Thread receiver = new Receiver(socket);
			receiver.start();

			// 사용자로부터 얻은 문자열을 서버로 전송해주는 역할을 하는 쓰레드
			Thread sender = new Sender(socket);
			sender.start();

		} catch (Exception e)
		{
			System.out.println("예외[MultiClient class]:" + e);
		}
	}
	public class Member
	{ // DB table(member2)의 일치

		private String id; // id field (varchar2(20) : PK)
		private String pw; // pw field (varchar2(20))

		public String getId()
		{
			return id;
		}

		public String getPw()
		{
			return pw;
		}

		public void setId(String id)
		{
			this.id = id;
		}

		public void setPw(String pw)
		{
			this.pw = pw;
		}
	}
	public static ArrayList<Member> getMembers() throws SQLException, Exception
	{

		Connection con = null;
		PreparedStatement pstmt = null; // 미리처리하기 때문에 쓴다. (빠르다)
		// Statement pstmt = null;
		ResultSet rs = null;

		ArrayList<Member> members = new ArrayList<Member>();
		Member member;
		// DB Table 의 1개의 레코드(record : row)를 불러오기 위한 temp(임시) 변수

		con = null;
		String sql = "SELECT * FROM USERS";

		try
		{
			pstmt = con.prepareStatement(sql);
			rs = pstmt.executeQuery();

			// pstmt = con.createStatement(); ->
			// sql을 후에 처리 \ PraparedStatement 보다 SQL 구문 처리가 한단계
			// 늦기 때문에 SQL 처리 성능이 저하
			// rs = pstmt.executeQuery(sql);
			// ※ CallableStatement : PL/SQL 처리할때 사용

			while (rs.next())
			{

				member = null; // temp

				member.setId(rs.getString("id")); // id 필드값을 가져옴
				member.setPw(rs.getString("pw")); // pw 필드값을 가져옴

				members.add(member); // 한명의 정보 -> 전체 인원 현황 객체
			}

			rs.close();
			pstmt.close();
			con.close();

		} catch (SQLException e)
		{
			System.out.println("예외처리 3:" + e.getMessage()); // 예외 메시지 (console) 인쇄
			e.printStackTrace();
		} catch (Exception e)
		{
			System.out.println("예외처리 4:" + e.getMessage());
			e.printStackTrace();
		}

		return members;
	}
	public void login() {
		ArrayList<Member> members = new ArrayList<Member>();
		HashMap<String, String> map = new HashMap<String, String>();
		
		try
		{
			members = getMembers();

			for (int i = 0; i < members.size(); i++)
				map.put(members.get(i).getId(), members.get(i).getPw());
			Scanner s = new Scanner(System.in); // 화면으로부터 라인단위로 입력받는다.

			while (true)
			{
				System.out.println("id와 password를 입력해주세요.");
				System.out.print("id :");
				String id = s.nextLine().trim();

				System.out.print("password :");
				String password = s.nextLine().trim();
				System.out.println();

				if (!map.containsKey(id))
				{
					System.out.println("입력하신 id는 존재하지 않습니다. 다시 입력해주세요.");
					continue;
				} else
				{
					if (!(map.get(id)).equals(password))
					{
						System.out.println("비밀번호가 일치하지 않습니다. 다시 입력해주세요.");
					} else
					{
						System.out.println("id와 비밀번호가 일치합니다.");
						break;
					}
				}
			} // while
		} catch (SQLException e)
		{
			System.out.println("예외처리 :" + e.getMessage()); // 예외 메시지 (console) 인쇄
			e.printStackTrace();
		} catch (Exception e)
		{
			System.out.println("예외처리 6:" + e.getMessage());
			e.printStackTrace();
		}
	}
}