import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.sql.*;

public class MultiServer
{
	static ServerSocket serverSocket = null;
	static Socket socket = null;
	static Connection con;
	Map<String, String> listw;
	Map<String, String> inviteM;
	Map<String, PrintWriter> waitUser; // 대기방 사용자
	Map<String, PrintWriter> clientMap; // 사용자 아이디와 출력할 내용 -- 대기실용 해시맵
	Map<String, Map<String, PrintWriter>> roomN; // 공개방 해시맵
	Map<String, Map<String, PrintWriter>> roomP; // 비밀방
	Map<String, Integer> capa; // 각방의 정원
	Map<String, String> pwd; // 비밀방의 비밀번호

	public MultiServer()
	{
		inviteM = new HashMap<String, String>();
		waitUser = new HashMap<String, PrintWriter>();
		clientMap = new HashMap<String, PrintWriter>();
		roomN = new HashMap<String, Map<String, PrintWriter>>();
		capa = new HashMap<String, Integer>();
		pwd = new HashMap<String, String>();
		listw = new HashMap<String, String>();
		Collections.synchronizedMap(clientMap);
		
		listw.put("/list", "모든 사용자 리스트");
		listw.put("/waituser", "대기방 유저 리스트");
		listw.put("/rlist", "채팅방 리스트 출력");
		listw.put("/adword", "개인 금칙어 설정 추가");
		listw.put("/delword", "개인 설정 금칙어 삭제");
		listw.put("/agree", "채팅방 초대 수락 명령어");
		
		// 해쉬맵 동기화 설정.
		Collections.synchronizedMap(inviteM);
		Collections.synchronizedMap(waitUser);
		Collections.synchronizedMap(roomN);
		Collections.synchronizedMap(clientMap);
		Collections.synchronizedMap(capa);
		Collections.synchronizedMap(pwd);

	}

	public void init()
	{
		try
		{
			serverSocket = new ServerSocket(9999);
			System.out.println("서버가 시작되었습니다.");

			while (true)
			{
				socket = serverSocket.accept();
				System.out.println(socket.getInetAddress() + ":" + socket.getPort());

				Thread msr = new MultiServerT(socket);
				msr.start();
			}
		} catch (Exception e)
		{
			e.printStackTrace();
		} finally
		{
			try
			{
				serverSocket.close();
			} catch (Exception e)
			{
				e.printStackTrace();
			}
		}
	}

	public void list(PrintWriter out)
	{
		Iterator<String> it = clientMap.keySet().iterator();
		String msg = "사용자리스트 [";
		while (it.hasNext())
		{
			msg += (String) it.next() + ",";
		}
		msg = msg.substring(0, msg.length() - 1) + "]";
		try
		{
			out.println(msg); // 리스트출력
		} catch (Exception e)
		{
		}
	}

	public static void main(String[] args)
	{
		Connection conn = null;
		Statement stmt = null;
		
		try
		{
			Class.forName("oracle.jdbc.driver.OracleDriver");
//			System.out.println("오라클 드라이버됨"); //확인용
			String url = ("jdbc:oracle:thin:@localhost:1521:xe");
			String user = ("mchat");
			String password = ("123");
			
			conn = DriverManager.getConnection(url,user,password);
//			System.out.println("conn ="+conn); // 확인용
			
			stmt = conn.createStatement();
			StringBuffer sql = new StringBuffer();
		}catch(ClassNotFoundException e){
			System.out.println("오라클 드라이버 클래스를 못찾음");
		} 
		catch (SQLException e)
		{
			System.out.println("sql오류"+e.getMessage());
		}finally {
			try
			{
				if(stmt != null) stmt.close();
				if(conn != null) conn.close();
			} catch (Exception e)
			{
			}
		}
		
		

//		try
//		{
//			con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "mchat", "123");
//		} catch (SQLException sqle)
//		{
//			System.out.println("sqlㅗㅇㄹㅠ");
//		}
		MultiServer ms = new MultiServer();
		ms.init();
	}

	class MultiServerT extends Thread
	{
		Socket socket;
		PrintWriter out = null;
		BufferedReader in = null;
		String name = "";

		public MultiServerT(Socket socket)
		{
			this.socket = socket;
			try
			{
				out = new PrintWriter(this.socket.getOutputStream(), true);
				in = new BufferedReader(new InputStreamReader(this.socket.getInputStream()));
			} catch (Exception e)
			{
				System.out.println("예외:" + e);
			}
		}

		public void run()
		{
			int th,type=0;
			String s,ss,getmenu = "";		// ss
			String id,pw,key=null; 			//아디비번, 키값
			Iterator<String> iter = null;
			out.println("ㄱㄷㄱㄷㄱㄷㄱㄷㄱㄷㄱㄷㄱㄷㄱㄷ"); // 대기방
			out.println("ㄱㄷㄱㄷㄱㄷ==----==ㄱㄷㄱㄷㄱㄷ");
			out.println("ㄱㄷㄱㄷㄷㄱㄷㄱㄷㄱㄷㄷㄱㄷㄱㄷ");
			
			try
			{
				name = in.readLine();
				System.out.println("[" + name + "]님이 대화방에 입장하셨습니다.");
				sendAllMsg(name + "님이 입장하셨습니다.", "");
				clientMap.put(name, out);
				System.out.println("현재 접속자 수는 " + clientMap.size() + "명 입니다.");
				while (in != null)
				{
					s = in.readLine();
					if (s.equals("q") || s.equals("Q"))
						break;

					System.out.println(name + " > " + s);
					if (s.equals("/list"))
						list(out);
					else
						sendAllMsg(s, name);
				}
				System.out.println("쓰레드 종료.");
			} catch (Exception e)
			{
				System.out.println("예외:" + e);
			} finally
			{
				clientMap.remove(name);
				sendAllMsg(name + "님이 퇴장하셨습니다.", "");
				System.out.println("현재 접속자 수는 " + clientMap.size() + "명 입니다.");
				try
				{
					in.close();
					out.close();
					socket.close();
				} catch (Exception e)
				{
					e.printStackTrace();
				}
			}
		}

		public void sendAllMsg(String msg, String name)
		{
			Iterator<String> it = clientMap.keySet().iterator();
			while (it.hasNext())
			{
				try
				{
					PrintWriter it_out = (PrintWriter) clientMap.get(it.next());
					if (name.equals(""))
					{
						it_out.println(msg);
					} else
					{
						it_out.println(name + " > " + msg);
					}
				} catch (Exception e)
				{
					System.out.println("예외:" + e);
				}
			}
		}

	}
}